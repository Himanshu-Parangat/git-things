name: Build Status Check

permissions:
  actions: write
  checks: write
  contents: write
  pull-requests: write
  statuses: write

on:
  workflow_dispatch:
    inputs:
      PullRequestLink:
        description: "Enter the Pull Request Link"
        required: true

jobs:
  Context-Preserver:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch PR data
        id: GetPullRequestData
        run: |
          gh pr view "${{ github.event.inputs.PullRequestLink }}" --json number,headRefOid,url,title,changedFiles,commits,files > PullRequestData.txt
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch PR data."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Environment
        id: loadEnvironment
        run: |
          echo "PR_NUMBER=$(jq -r '.number' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_SHA=$(jq -r '.headRefOid' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_URL=$(jq -r '.url' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Title=$(jq -r '.title' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles_count=$(jq -r '.changedFiles' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles=$(jq -r '.files | map("\n- " + .path) |  join("")'  PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_commits_titel=$( jq -r '.commits | map( "\n- " + .messageHeadline) |join("")' PullRequestData.txt)" >> $GITHUB_ENV
          echo "START_TIME=$(node -e 'console.log(new Date().toISOString())')" >> $GITHUB_ENV

      - name: Create and Run Check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const In_progress_Message_summery = `**Validating PR:** ${{ env.PR_URL }}...
              > - **Title:** \`${{ env.PR_Title }}\`  
              > - **Branch:** \`${{ env.GITHUB_REF_NAME }}\`  
              > - **Commit SHA:** \`${{ env.PR_SHA }}\`  
              > - **Total Changed Files:** \`${{ env.PR_Total_changedFiles_count }}\`  
              > - **Files Modified:** \`${{ env.PR_Total_changedFiles }}\`  
              > - **Commit Messages:**   \`${{ env.PR_commits_titel }}\`  
              > - **Started At:** \`${{ env.START_TIME }}\`  
            `;

            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: 'in_progress',
              started_at: new Date().toISOString(),
              output: {
                title: 'Can it pass the build test?..',
                summary: In_progress_Message_summery
              },
            });

      - name: Perform Task
        id: perform_task
        run: |
          echo "Performing task..."
          sleep 18
          echo "Task completed."

      - name: Create and Run Check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const completedAt = new Date().toISOString();

            const completed_Message_summery = `**Validated PR:** ${{ env.PR_URL }}...
              > - **Title:** \`${{ env.PR_Title }}\`  
              > - **Branch:** \`${{ env.GITHUB_REF_NAME }}\`  
              > - **Commit SHA:** \`${{ env.PR_SHA }}\`  
              > - **Total Changed Files:** \`${{ env.PR_Total_changedFiles_count }}\`  
              > - **Files Modified:** \`${{ env.PR_Total_changedFiles }}\`  
              > - **Commit Messages:**   \`${{ env.PR_commits_titel }}\`  
              > - **Started At:** \`${{ env.START_TIME }}\`  
              > - **Completed At:** \`${completedAt}\`  
              >  
              > The build compiled successfully`;

            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: 'completed',
              conclusion: 'success',
              completed_at: completedAt,
              output: {
                title: 'Passed the build check successfully',
                summary: completed_Message_summery
              },
            });
