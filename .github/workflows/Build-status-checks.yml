name: Build Status Check

permissions:
  actions: write
  checks: write
  contents: write
  pull-requests: write
  statuses: write

on:
  workflow_dispatch:
    inputs:
      PullRequestLink:
        description: "Enter the Pull Request Link"
        required: true

jobs:
  Context-Preserver:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch PR data
        id: GetPullRequestData
        run: |
          gh pr view "${{ github.event.inputs.PullRequestLink }}" --json number,headRefOid,headRefName,url,title,changedFiles,commits,files > PullRequestData.txt
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch PR data."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Environment
        id: loadEnvironment
        run: |
          echo "PR_NUMBER=$(jq -r '.number' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_SHA=$(jq -r '.headRefOid' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_URL=$(jq -r '.url' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Branch=$(jq -r '.headRefName' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Title=$(jq -r '.title' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles_count=$(jq -r '.changedFiles' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles=$(jq -r '.files | map(.path)'  PullRequestData.txt | base64)" >> $GITHUB_ENV
          echo "PR_commits_titel=$( jq -r '.commits | map(.messageHeadline)' PullRequestData.txt | base64)" >> $GITHUB_ENV
          echo "START_TIME"=$(node -e "
            const d = new Date();
            const year = d.getFullYear();
            const month = d.toLocaleString('en-US', { month: 'short' });
            const day = d.getDate();
            const hours = d.getHours();
            const minutes = d.getMinutes();
            const seconds = d.getSeconds();
            console.log(\`\${year} \${month} \${day}, \${hours}:\${minutes}:\${seconds}\`);
          ") >> $GITHUB_ENV

      # In_progress
      - name: Create and Run Check(InProgress)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const started_at = process.env.START_TIME
            const finished_At = (function() {
              const d = new Date();
              const year = d.getFullYear();
              const month = d.toLocaleString('en-US', { month: 'short' });
              const day = d.getDate();
              const hours = d.getHours();
              const minutes = d.getMinutes();
              const seconds = d.getSeconds();

              return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
            })();

            function generate_summary(status_header, status_img, status_img_alt, status_img_width, status_quote, status_footer) {
              const header = `<b>${status_header}</b> ${{ env.PR_URL }}`;
              const image_body = `<p align='center'> <img src="${status_img}" alt="${status_img_alt}" width="${status_img_width}"> </p>`;
              const quote_body = `<p align="center">${status_quote}</p></br>`;
              const Branch = `<li><b>Branch:</b> <code>${ process.env.PR_Branch }</code></li>`;
              const Title = `<li><b>Title:</b> <code>${ process.env.PR_Title }</code></li>`;
              const Validating_Up_to_Commit = `<li><b>Validating Up to Commit:</b> ${ process.env.PR_SHA }</li>`;
              const Total_Changed_Files = `<li><b>Total Changed Files:</b> <code>${ process.env.PR_Total_changedFiles_count }</code></li>`;
              const Files_Modified = `<li><b>Files Modified:</b><ol>${totalChangedFilesList}</ol></li>`;
              const Commit_Messages = `<li><b>Commit Messages:</b><ol>${commitMessagesList}</ol></li>`;
              const Started_At = `<li><b>Started At:</b> <code>${started_at}</code></li>`;
              const Finished_At = `<li><b>Finished_At At:</b> <code>${finished_At}</code></li>`;

              const Message_body = [
                Branch,
                Title,
                Validating_Up_to_Commit,
                Total_Changed_Files,
                Files_Modified,
                Commit_Messages,
                Started_At
                ].join('');

              return [
                header,
                image_body,
                quote_body,
                '<ul>',
                Message_body,
                '</ul>',
                status_footer
              ].join('');
            }

            const status_header = "Validating PR:"
            const status_img = "https://media1.tenor.com/m/t80Qwz2QouMAAAAd/yuru-yuri-ayano-sugiura.gif"
            const status_img_alt = "thinking-test"
            const status_img_width = "200"
            const status_quote = "Take a break, have some rest & grab some water! Meanwhile, we're running tests<br>to ensure the code builds successfully. This won't take long."
            const status_footer = "The build Compilation is in Progress"
            const In_progress_Message_summery = generate_summary( status_header, status_img, status_img_alt, status_img_width, status_quote, status_footer);


            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: 'in_progress',
              started_at: new Date().toISOString(),
              output: {
                title: 'Can it pass the build test?..',
                summary: In_progress_Message_summery
              },
            });

      # - name: Perform Task
      #   id: perform_skip_task
      #   run: |
      #     echo "Performing task..."
      #     sleep 30
      #     echo "somting went wrong(not really)."
      #
      # # skipped
      # - name: Create and Run Check(skipped)
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const skippedAt = (function() {
      #         const d = new Date();
      #         const year = d.getFullYear();
      #         const month = d.toLocaleString('en-US', { month: 'short' });
      #         const day = d.getDate();
      #         const hours = d.getHours();
      #         const minutes = d.getMinutes();
      #         const seconds = d.getSeconds();
      #
      #         return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
      #       })();
      #
      #       const skipped_Message_summery = `<b>Skipping PR:</b> ${{ env.PR_URL }}
      #         <p align="center">
      #           <img src="https://media1.tenor.com/m/iora7DooHl0AAAAd/vkay-hmn.gif" alt="vibing summer" width="300">
      #         </p>
      #         <p align="center">  
      #           Skip, skip, skip—There is Nothing new to build, So this will be skipped!</br>  
      #           Oh, and you should definitely take a break and drink some water—don’t let that skip!
      #         </p>
      #
      #         <ul>
      #           <li><b>Branch:</b> <code>${{ env.PR_Branch }}</code></li>
      #           <li><b>Title:</b> <code>${{ env.PR_Title }}</code></li>
      #           <li><b>Validated Up to Commit:</b> ${{ env.PR_SHA }}</li>
      #           <li><b>Total Changed Files:</b> <code>${{ env.PR_Total_changedFiles_count }}</code></li>
      #           <li>
      #             <b>Files Modified:</b> 
      #             <ol>
      #               ${totalChangedFilesList}
      #             </ol>
      #           </li>
      #           <li>
      #             <b>Commit Messages:</b>
      #               <ol>
      #                 ${commitMessagesList}
      #               </ol>
      #           </li>
      #           <li><b>Started At:</b> <code>${{ env.START_TIME }}</code></li>
      #           <li><b>Skipped At:</b> <code>${skippedAt}</code></li>
      #         </ul> 
      #         The build step got skipped Nothing to compile`;
      #
      #       const check = await github.rest.checks.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         name: 'Run build Test',
      #         head_sha: '${{ env.PR_SHA }}',
      #         external_id: '69',
      #         status: 'completed',
      #         conclusion: 'skipped',
      #         completed_at: new Date().toISOString(),
      #         output: {
      #           title: 'Nothing to compile Skipping',
      #           summary: skipped_Message_summery
      #         },
      #       });
      #
      # - name: Perform Task
      #   id: perform_warning_task
      #   run: |
      #     echo "Performing task..."
      #     sleep 30
      #     echo "somting went wrong(not really)."
      #
      # # warning
      # - name: Create and Run Check(warning)
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const warningAt = (function() {
      #         const d = new Date();
      #         const year = d.getFullYear();
      #         const month = d.toLocaleString('en-US', { month: 'short' });
      #         const day = d.getDate();
      #         const hours = d.getHours();
      #         const minutes = d.getMinutes();
      #         const seconds = d.getSeconds();
      #
      #         return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
      #       })();
      #
      #       const Warning_Message_summery = `<b>Validated PR:</b> ${{ env.PR_URL }}
      #         <p align="center">
      #           <img src="https://media1.tenor.com/m/75aAMJUb_S4AAAAd/anime-gochiusa.gif" alt="no idea what hppend" width="300">
      #         </p>
      #
      #         <p align="center">
      #           Hmm... The build test ran into an unexpected Behavior. Honestly, I'm just as confused as you are!</br>
      #           Need to Check the logs for more details, Take a break, and we will notify you. 
      #         </p>              
      #
      #         <ul>
      #           <li><b>Branch:</b> <code>${{ env.PR_Branch }}</code></li>
      #           <li><b>Title:</b> <code>${{ env.PR_Title }}</code></li>
      #           <li><b>Validated Up to Commit:</b> ${{ env.PR_SHA }}</li>
      #           <li><b>Total Changed Files:</b> <code>${{ env.PR_Total_changedFiles_count }}</code></li>
      #           <li>
      #             <b>Files Modified:</b> 
      #             <ol>
      #               ${totalChangedFilesList}
      #             </ol>
      #           </li>
      #           <li>
      #             <b>Commit Messages:</b>
      #               <ol>
      #                 ${commitMessagesList}
      #               </ol>
      #           </li>
      #           <li><b>Started At:</b> <code>${{ env.START_TIME }}</code></li>
      #           <li><b>Unexpended Behaviour At:</b> <code>${warningAt}</code></li>
      #         </ul> 
      #         Some Unexpended Behaviour Observed, check logs`;
      #
      #       const check = await github.rest.checks.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         name: 'Run build Test',
      #         head_sha: '${{ env.PR_SHA }}',
      #         external_id: '69',
      #         status: 'completed',
      #         conclusion: 'neutral',
      #         completed_at: new Date().toISOString(),
      #         output: {
      #           title: 'Build Test Unexpended Behaviour Warnings',
      #           summary: Warning_Message_summery
      #         },
      #       });
      #
      #
      # - name: Perform Task
      #   id: perform_failed_task
      #   run: |
      #     echo "Performing task..."
      #     sleep 30
      #     echo "Task completed."
      #
      #
      # # failed
      # - name: Create and Run Check(failed)
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
      #         .filter(item => item.trim() !== '')
      #         .map(item => `<li><code>${item}</code></li>`)
      #         .join('');
      #
      #       const failedAt = (function() {
      #         const d = new Date();
      #         const year = d.getFullYear();
      #         const month = d.toLocaleString('en-US', { month: 'short' });
      #         const day = d.getDate();
      #         const hours = d.getHours();
      #         const minutes = d.getMinutes();
      #         const seconds = d.getSeconds();
      #
      #         return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
      #       })();
      #
      #       const Failed_Message_summery = `<b>Build test failed for PR:</b> ${{ env.PR_URL }}
      #         <p align="center">
      #           <img src="https://media1.tenor.com/m/UDzn7Mcr_gwAAAAd/anime-frieren.gif" alt="nod-left-right-no" width="200">
      #         </p>
      #
      #         <p align="center">
      #           Oops! The build process didn’t succeed—another day, another grind.</br> 
      #           Need to Check the logs for details, Take a break and wait for someone to notify you. :3
      #         </p>              
      #
      #         <ul>
      #           <li><b>Branch:</b> <code>${{ env.PR_Branch }}</code></li>
      #           <li><b>Title:</b> <code>${{ env.PR_Title }}</code></li>
      #           <li><b>Validated Up to Commit:</b> ${{ env.PR_SHA }}</li>
      #           <li><b>Total Changed Files:</b> <code>${{ env.PR_Total_changedFiles_count }}</code></li>
      #           <li>
      #             <b>Files Modified:</b> 
      #             <ol>
      #               ${totalChangedFilesList}
      #             </ol>
      #           </li>
      #           <li>
      #             <b>Commit Messages:</b>
      #               <ol>
      #                 ${commitMessagesList}
      #               </ol>
      #           </li>
      #           <li><b>Started At:</b> <code>${{ env.START_TIME }}</code></li>
      #           <li><b>Failed At:</b> <code>${failedAt}</code></li>
      #         </ul> 
      #         The build didn't compiled`;
      #
      #       const check = await github.rest.checks.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         name: 'Run build Test',
      #         head_sha: '${{ env.PR_SHA }}',
      #         external_id: '69',
      #         status: 'completed',
      #         conclusion: 'failure',
      #         completed_at: new Date().toISOString(),
      #         output: {
      #           title: 'build Test Failed',
      #           summary: Failed_Message_summery
      #         },
      #       });


      - name: Perform Task
        id: perform_success_task
        run: |
          echo "Performing task..."
          sleep 30
          echo "Task completed."

      # success
      - name: Create and Run Check(success)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const completedAt = (function() {
              const d = new Date();
              const year = d.getFullYear();
              const month = d.toLocaleString('en-US', { month: 'short' });
              const day = d.getDate();
              const hours = d.getHours();
              const minutes = d.getMinutes();
              const seconds = d.getSeconds();

              return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
            })();

            const completed_Message_summery = `<b>Validated PR:</b> ${{ env.PR_URL }}
              <p align="center">
                <img src="https://media.tenor.com/0XDvs2JB8RsAAAAj/meiling-thumbs-up.gif" alt="thumbs up good">
              </p>
              <p align="center">
                Build tests went smoothly—good job, friend! Thanks</br> 
                For the hard work and precious Time. Take a well-deserved break, okay?
              </p>

              <ul>
                <li><b>Branch:</b> <code>${{ env.PR_Branch }}</code></li>
                <li><b>Title:</b> <code>${{ env.PR_Title }}</code></li>
                <li><b>Validated Up to Commit:</b> ${{ env.PR_SHA }}</li>
                <li><b>Total Changed Files:</b> <code>${{ env.PR_Total_changedFiles_count }}</code></li>
                <li>
                  <b>Files Modified:</b> 
                  <ol>
                    ${totalChangedFilesList}
                  </ol>
                </li>
                <li>
                  <b>Commit Messages:</b>
                    <ol>
                      ${commitMessagesList}
                    </ol>
                </li>
                <li><b>Started At:</b> <code>${{ env.START_TIME }}</code></li>
                <li><b>Completed At:</b> <code>${completedAt}</code></li>
              </ul> 
              The build compiled successfully`;

            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: 'completed',
              conclusion: 'success',
              completed_at: new Date().toISOString(),
              output: {
                title: 'Passed the build check successfully',
                summary: completed_Message_summery
              },
            });
