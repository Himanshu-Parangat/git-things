name: PullRequest Build Check

permissions:
  actions: write
  checks: write
  contents: write
  pull-requests: write
  statuses: write

on:
  workflow_dispatch:
    inputs:
      PullRequestLink:
        description: "Enter the Pull Request Link"
        required: true
        type: string

      OverrideTestResult:
        description: 'Focre Overwrite Result'
        required: false
        default: false
        type: boolean

      OverrideStatusTo:
        description: 'Focre Status Check to'
        required: false
        default: 'overwrite'
        type: choice
        options:
          - success
          - failure
          - skipped
          - neutral
          - overwrite

jobs:
  Pr-Build-Validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch PR data
        id: fetch-pr-data
        run: |
          gh pr view "${{ github.event.inputs.PullRequestLink }}" --json number,headRefOid,headRefName,url,title,changedFiles,commits,files > PullRequestData.txt
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch PR data."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load PR Data to Environment Variables
        id: load-pr-environment
        run: |
          echo "PR_NUMBER=$(jq -r '.number' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_SHA=$(jq -r '.headRefOid' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_URL=$(jq -r '.url' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Branch=$(jq -r '.headRefName' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Title=$(jq -r '.title' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles_count=$(jq -r '.changedFiles' PullRequestData.txt)" >> $GITHUB_ENV
          echo "PR_Total_changedFiles=$(jq -rc '.files | map(.path)'  PullRequestData.txt | base64 | tr -d '\n')" >> $GITHUB_ENV
          echo "PR_commits_titel=$( jq -rc '.commits | map(.messageHeadline)' PullRequestData.txt | base64 | tr -d '\n')" >> $GITHUB_ENV
          echo "START_TIME"=$(node -e "
            const d = new Date();
            const year = d.getFullYear();
            const month = d.toLocaleString('en-US', { month: 'short' });
            const day = d.getDate();
            const hours = d.getHours();
            const minutes = d.getMinutes();
            const seconds = d.getSeconds();
            console.log(\`\${year} \${month} \${day}, \${hours}:\${minutes}:\${seconds}\`);
          ") >> $GITHUB_ENV

      - name: Analyze File Changes & Target Mapping
        id: file-changes-targets-mapping
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')

            const patterns = [
              { pattern: "^firewall/reverseProxy/*", target: "reverseProxy" },
              { pattern: "^firewall/waf/*", target: "waf" },
              { pattern: "^testing-env/application/*", target: "application" },
              { pattern: "^testing-env/server/*", target: "server" },
              { pattern: "^testing-env/simulator/*", target: "simulator" },
              { pattern: "^docs/*", target: "documentation" },
              { pattern: "^Makefile", target: "all" },
            ];

            const getTarget = (filePath) => {
              for (const { pattern, target } of patterns) {
                const regex = new RegExp(pattern);
                if (regex.test(filePath)) {
                  return target;
                }
              }
              return "skip";
            };

            const targets = totalChangedFilesList.map(item => getTarget(item));
            core.exportVariable(
              'TARGETS_BUILD',
              Buffer.from(JSON.stringify(targets.includes("all") ? ["all"] : targets))
                .toString('base64')
                .replace(/\n/g, '')
            );

            const all_targets = patterns
              .map(item => item.target)
              .filter(target => target !== "all");

            core.exportVariable(
              'ALL_TARGETS',
              Buffer.from(JSON.stringify(all_targets))
                .toString('base64')
                .replace(/\n/g, '')
            );

      - name: Create Initial Status Check
        id: create-status-checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const started_at = process.env.START_TIME
            const finished_At = (function() {
              const d = new Date();
              const year = d.getFullYear();
              const month = d.toLocaleString('en-US', { month: 'short' });
              const day = d.getDate();
              const hours = d.getHours();
              const minutes = d.getMinutes();
              const seconds = d.getSeconds();

              return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
            })();

            const components_build_target = JSON.parse(Buffer.from(process.env.TARGETS_BUILD, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<code>${item}</code>`)
              .join(', ');

            function generate_summary(status_header, status_img, status_img_alt, status_img_width, status_quote, additional_info) {
              const header = `<b>${status_header}</b> ${process.env.PR_URL}`;
              const image_body = `<p align='center'> <img src="${status_img}" alt="${status_img_alt}" width="${status_img_width}"> </p>`;
              const quote_body = `<p align="center">${status_quote}</p></br>`;
              const Branch = `<li><b>Branch:</b> <code>${ process.env.PR_Branch }</code></li>`;
              const Title = `<li><b>Title:</b> <code>${ process.env.PR_Title }</code></li>`;
              const Validating_Up_to_Commit = `<li><b>Validating Up to Commit:</b> ${ process.env.PR_SHA }</li>`;
              const Total_Changed_Files = `<li><b>Total Changed Files:</b> <code>${ process.env.PR_Total_changedFiles_count }</code></li>`;
              const Files_Modified = `<li><b>Files Modified:</b><ol>${totalChangedFilesList}</ol></li>`;
              const Commit_Messages = `<li><b>Commit Messages:</b><ol>${commitMessagesList}</ol></li>`;
              const Started_At = `<li><b>Started At:</b> <code>${started_at}</code></li>`;
              const Finished_At = `<li><b>Finished At:</b> <code>${finished_At}</code></li>`;
              const Status_footer = `</br><b>Build Target:</b> ${components_build_target}`;

              const Message_body = [
                Branch,
                Title,
                Validating_Up_to_Commit,
                Total_Changed_Files,
                Files_Modified,
                Commit_Messages,
                Started_At,
                Finished_At
                ].join('');

              return [
                header,
                image_body,
                quote_body,
                '<ul>',
                Message_body,
                '</ul>',
                Status_footer,
                '</br><b>', additional_info, '</b>'
              ].join('');
            }

            const status_header = "Validating PR:"
            const status_img = "https://media1.tenor.com/m/t80Qwz2QouMAAAAd/yuru-yuri-ayano-sugiura.gif"
            const status_img_alt = "thinking-test"
            const status_img_width = "200"
            const status_quote = "Take a break, have some rest & grab some water! Meanwhile, we're running tests<br>to ensure the code builds successfully. This won't take long."
            const status_additional_info = "The build builds is in Progress"
            const In_progress_Message_summery = generate_summary( status_header, status_img, status_img_alt, status_img_width, status_quote, status_additional_info);


            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: 'in_progress',
              started_at: new Date().toISOString(),
              output: {
                title: 'Can it pass the build test?..',
                summary: In_progress_Message_summery
              },
            });

      - name: Checkout Preposed Pull Request 
        id: checkout-pr-branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_Branch }}
          fetch-depth: 0

      - name: Report Branch Status
        id: report-branch-status
        run: |
          echo -e "\033[1;32m[CHECKOUT] Successfully checked out branch: $(git branch --show-current)\033[0m"
          echo -e "\033[1;32m[CHECKOUT] Branch should match: ${{ env.PR_Branch }}\033[0m"

      - name: Conditional Build & Status Annotation
        id: conditional-build-and-status-annotation
        run: |
          echo -e "\033[0;35m[Check] Checking build task... \033[0m"

          all_components=($(echo "${{env.ALL_TARGETS}}" | base64 -d | tr -d '\n' | jq -rc '.[]'))
          detected_components=($(echo "${{env.TARGETS_BUILD}}" | base64 -d | tr -d '\n'  | jq -rc '.[]'))
          results=()

          perform_skipping(){
            echo -e "\033[0;35m[All build] okay skipping all builds \033[0m"

            local components=("$@")
            for target in "${components[@]}"; do
              echo -e "\033[35m[skipping] $target component skipped!\033[0m\n\n"
                results+=("${target}:skipping")
                
            done
          }


          perform_all_builds(){
            echo -e "\033[0;35m[All build] okay all builds \033[0m"
            local components=("$@")
            for target in "${components[@]}"; do
              build_target="build-$target"
              if ! make "$build_target" 2>&1; then
                echo -e "\033[31m[failed] $target components need changes\033[0m\n\n"
                  results+=("${target}:failing")
              else
                echo -e "\033[32m[passed] $target component build successfully!\033[0m\n\n"
                  results+=("${target}:passing")
              fi
            done
          }


          perform_selective_builds(){
            echo -e "\033[0;35m[seletive build] okay seletive builds \033[0m"
            local components=("$@")
            for target in "${components[@]}"; do
              build_target="build-$target"
              echo -e "\033[32m[running] $target 'make $build_target'!\033[0m"
              if ! make "$build_target" 2>&1; then
                echo -e "\033[31m[failed] $target components need changes\033[0m\n\n"
                  results+=("${target}:failing")
              else
                echo -e "\033[32m[passed] $target component build successfully!\033[0m\n\n"
                  results+=("${target}:passing")
              fi
            done
          }


          for components in "${detected_components[@]}"; do
            DO_TASK="all"
            echo -e "found target: $components"
            case "$components" in
              all) DO_TASK="all" ;;
              skip) DO_TASK="skip" ;;
              *) DO_TASK="selective" ;;
            esac
          done


          case "$DO_TASK" in
              skip) perform_skipping "${all_components[@]}" ;;
              all) perform_all_builds "${all_components[@]}" ;;
              *) perform_selective_builds "${detected_components[@]}" ;;
          esac

          echo -e "\033[0;35m[Finished] Build Process ended with the Result.\033[0m"
          build_result=$(echo ${results[@]} | tr -d '\n' | jq -R -c 'split(" ")' )

          echo $build_result

          echo -e "\033[0;35m[Exporting Env] result is set to the Environment Variable 'BUILD_RESULT' \033[0m"
          echo -e "BUILD_RESULT=$(echo "$build_result" | base64 | tr -d '\n')" >> $GITHUB_ENV

      - name: Evaluate Build Conclusion & Generate Status Badges
        id: check-for-outcome-and-badges
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = JSON.parse(Buffer.from(process.env.BUILD_RESULT, 'base64').toString('utf-8'))

            function generateBadge(component, status) {
              let color = "";
              let logo = "";

              switch (status) {
                case "passing":
                  color = "brightgreen";
                  break;
                case "failing":
                  color = "red";
                  break;
                case "skipping":
                  color = "AC87C5";
                  break;
                default:
                  color = "9CA3AF";
              }

              switch (component) {
                case "document":
                  logo = "readthedocs";
                  break;
                default:
                  logo = "go";
              }
              const imgTag = `<img src='https://img.shields.io/badge/${component}-${status}-${color}?logo=${logo}' alt='${component}-status-${status}'>`;
              return imgTag;
            }


            let count_total_components = 0;
            let count_failure_components = 0;
            let count_success_components = 0;
            let count_skipped_components = 0;
            let count_unexpected_behaviour = 0;
            let badges=[];


            console.log(" ");
            console.log("\033[0;35m[Summary] Component status \033[0m");
            results.forEach(entry => {
              count_total_components++;

              if (!entry.includes(':')) {
                console.log("Invalid entry:", entry);
                count_unexpected_behaviour++;
                return;
              }
              
              const [components, status] = entry.split(':');
              console.log(components, "status => ", status);
              badges.push(generateBadge(components, status));
              
              if (status === "passing") {
                count_success_components++;
              } else if (status === "skipping") {
                count_skipped_components++;
              } else if (status === "failing") {
                count_failure_components++;
              } else {
                count_unexpected_behaviour++;
              }

            });

            console.log(" ");
            console.log("\033[0;35m[Summary] For All Iterated Component \033[0m");
            console.log("Total Components:", count_total_components);
            console.log("Success Components:", count_success_components);
            console.log("Skipped Components:", count_skipped_components);
            console.log("Failure Components:", count_failure_components);
            console.log("Unexpected Behaviour:", count_unexpected_behaviour);

            core.exportVariable(
              'STATUS_BADGES',
              Buffer.from(JSON.stringify(badges).replace(/\n/g, ''))
                .toString('base64')
                .replace(/\n/g, '')
            );
            
            let status;

            if (count_unexpected_behaviour > 0) {
                status = "unexpected";
            } else if (count_total_components === count_success_components) {
                status = "success";
            } else if (count_total_components === count_skipped_components) {
                status = "skipped";
            } else {
                status = "failure";
            }

            const OverrideTestResult = "${{ inputs.OverrideTestResult }}";
            const forcedStatus = "${{ inputs.OverrideStatusTo }}";
            let finalStatus = status;

            console.log(" ");
            if (OverrideTestResult === "true" ) {
              console.log("\033[0;31m[Overwrite] Detected flag for overwrite: " + OverrideTestResult + ", Detected status: " + forcedStatus + "\033[0m");
              console.log("\033[0;31m[Overwrite] Forcing test result from " + status + " to: " + forcedStatus + "\033[0m");
              finalStatus = forcedStatus
            } else {
              console.log("\033[0;35m[conclusion] is set to: " + status + "\033[0m");
              finalStatus = status
            }

            core.exportVariable("CONCLUSION",finalStatus);

      - name: Update Status Check
        id: update-status-checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const statusConfigs = { 
              success:{
                update_status : 'completed' ,
                update_conclusion : 'success',
                update_title : 'test passed successfully',
                status_header : "Validating PR:",
                status_img : "https://media.tenor.com/0XDvs2JB8RsAAAAj/meiling-thumbs-up.gif",
                status_img_alt : "thumbs-up good",
                status_img_width : "200",
                status_quote : "Build tests went smoothly—good job, friend! Thanks</br>For the hard work and precious Time. Take a well-deserved break, okay?",
                status_additional_info : "The build compiled successfully",
              },
              failure:{
                update_status : 'completed' ,
                update_conclusion : 'failure',
                update_title : 'build Test Failed',
                status_header : "Build test failed for PR:",
                status_img : "https://media1.tenor.com/m/UDzn7Mcr_gwAAAAd/anime-frieren.gif",
                status_img_alt : "nod-left-right-no",
                status_img_width : "200",
                status_quote : "Oops! The build process didn't succeed—another day, another grind.</br>Need to Check the logs for details, Take a break and wait for someone to notify you. :3",
                status_additional_info : "The build test Failed",
              },
              skipped:{
                update_status : 'completed' ,
                update_conclusion : 'skipped',
                update_title : 'Nothing to compile Skipping',
                status_header : "Skipping PR:",
                status_img : "https://media1.tenor.com/m/iora7DooHl0AAAAd/vkay-hmn.gif",
                status_img_alt : "nod-left-right-no",
                status_img_width : "200",
                status_quote : "Skip, skip, skip—there is nothing new to build, so this will be skipped!</br>oh, and you should definitely take a break and drink some water don't let that skip!",
                status_additional_info : "The build step got skipped Nothing to compile",
              },
              overwrite:{
                update_status : 'completed' ,
                update_conclusion : 'success',
                update_title : 'Test Result Overwritten',
                status_header : "Check Result was Overwritten for PR:",
                status_img : "https://media1.tenor.com/m/rKkO5hy-V9IAAAAC/anime-girl.gif",
                status_img_alt : "shocked funny",
                status_img_width : "300",
                status_quote : "Woo! No way! Someone overwrote the test results to accommodate these changes,</br>You should go and get some rest and stay hydrated—you'll be Informed soon.",
                status_additional_info : "Test was passed forcefully",
              },
              default:{
                update_status : 'completed' ,
                update_conclusion : 'neutral',
                update_title : 'Unexpected Behavior Detected',
                status_header : "PR Needs Manual Intervention:",
                status_img : "https://media1.tenor.com/m/75aAMJUb_S4AAAAd/anime-gochiusa.gif",
                status_img_alt : "no idea what hppend",
                status_img_width : "300",
                status_quote : "Hmm... The build test ran into an unexpected Behavior. Honestly, I'm just as confused as you are!</br>Need to Check the logs for more details, Take a break, and we will notify you.",
                status_additional_info : "Some Unexpended Behaviour Observed, check logs",
              }
            };

            const conclusion = process.env.CONCLUSION;

            const config = statusConfigs[conclusion] || statusConfigs.default;

            const  status_header = config.status_header
            const  status_img = config.status_img
            const  status_img_alt = config.status_img_alt
            const  status_img_width = config.status_img_width
            const  status_quote = config.status_quote
            const  status_additional_info = config.status_additional_info
            const  update_status = config.update_status
            const  update_conclusion = config.update_conclusion
            const  update_title = config.update_title

            const totalChangedFilesList = JSON.parse(Buffer.from(process.env.PR_Total_changedFiles, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const commitMessagesList = JSON.parse(Buffer.from(process.env.PR_commits_titel, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<li><code>${item}</code></li>`)
              .join('');

            const started_at = process.env.START_TIME
            const finished_At = (function() {
              const d = new Date();
              const year = d.getFullYear();
              const month = d.toLocaleString('en-US', { month: 'short' });
              const day = d.getDate();
              const hours = d.getHours();
              const minutes = d.getMinutes();
              const seconds = d.getSeconds();

              return `${year} ${month} ${day}, ${hours}:${minutes}:${seconds}`;
            })();

            const components_build_target = JSON.parse(Buffer.from(process.env.TARGETS_BUILD, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `<code>${item}</code>`)
              .join(', ');

            const log_contents = JSON.parse(Buffer.from(process.env.STATUS_BADGES, 'base64').toString('utf-8'))
              .filter(item => item.trim() !== '')
              .map(item => `${item}`)
              .join(' ');

            const redirect_url = process.env.PullRequestLink + "/files"
            const log_summary = `<details><summary><b>Status summery</b></summary><a href="${redirect_url}">${log_contents}</a></details>`

            console.log("\033[0;35m[Redirected Url] is set to: " + redirect_url + "\033[0m");
            console.log("\033[0;35m[Log Summary] is set to: " + log_summary + "\033[0m");

            function generate_summary(status_header, status_img, status_img_alt, status_img_width, status_quote, additional_info, log_summary) {
              const header = `<b>${status_header}</b> ${process.env.PR_URL}`;
              const image_body = `<p align='center'> <img src="${status_img}" alt="${status_img_alt}" width="${status_img_width}"> </p>`;
              const quote_body = `<p align="center">${status_quote}</p></br>`;
              const Branch = `<li><b>Branch:</b> <code>${ process.env.PR_Branch }</code></li>`;
              const Title = `<li><b>Title:</b> <code>${ process.env.PR_Title }</code></li>`;
              const Validating_Up_to_Commit = `<li><b>Validating Up to Commit:</b> ${ process.env.PR_SHA }</li>`;
              const Total_Changed_Files = `<li><b>Total Changed Files:</b> <code>${ process.env.PR_Total_changedFiles_count }</code></li>`;
              const Files_Modified = `<li><b>Files Modified:</b><ol>${totalChangedFilesList}</ol></li>`;
              const Commit_Messages = `<li><b>Commit Messages:</b><ol>${commitMessagesList}</ol></li>`;
              const Started_At = `<li><b>Started At:</b> <code>${started_at}</code></li>`;
              const Finished_At = `<li><b>Finished At:</b> <code>${finished_At}</code></li>`;
              const Status_footer = `</br><b>Build Target:</b> ${components_build_target}`;

              const Message_body = [
                Branch,
                Title,
                Validating_Up_to_Commit,
                Total_Changed_Files,
                Files_Modified,
                Commit_Messages,
                Started_At,
                Finished_At
                ].join('');

              return [
                header,
                image_body,
                quote_body,
                '<ul>',
                Message_body,
                '</ul>',
                Status_footer,
                '</br>',log_summary,
                '<b>', additional_info, '</b>'
              ].join('');
            }

            const status_message_summery = generate_summary( status_header, status_img, status_img_alt, status_img_width, status_quote, status_additional_info, log_summary);

            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run build Test',
              head_sha: '${{ env.PR_SHA }}',
              external_id: '69',
              status: update_status,
              conclusion: update_conclusion,
              completed_at: new Date().toISOString(),
              output: {
                title: update_title,
                summary: status_message_summery
              },
            });
